// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
// –í development –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏, –≤ production —Å–∫—Ä—ã–≤–∞–µ—Ç

interface LoggerConfig {
  enableInProduction?: boolean;
  prefix?: string;
}

class Logger {
  private isDevelopment = process.env.NODE_ENV === 'development';
  private isProduction = process.env.NODE_ENV === 'production';
  private config: LoggerConfig;

  constructor(config: LoggerConfig = {}) {
    this.config = {
      enableInProduction: false,
      prefix: '',
      ...config
    };
  }

  private shouldLog(): boolean {
    return this.isDevelopment === true || this.config.enableInProduction === true;
  }

  private formatMessage(message: string, ...args: unknown[]): [string, ...unknown[]] {
    const prefix = this.config.prefix ? `[${this.config.prefix}] ` : '';
    return [`${prefix}${message}`, ...args];
  }

  log(message: string, ...args: unknown[]): void {
    if (this.shouldLog()) {
      console.log(...this.formatMessage(message, ...args));
    }
  }

  warn(message: string, ...args: unknown[]): void {
    if (this.shouldLog()) {
      console.warn(...this.formatMessage(message, ...args));
    }
  }

  error(message: string, ...args: unknown[]): void {
    // –û—à–∏–±–∫–∏ –≤—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º
    console.error(...this.formatMessage(message, ...args));
  }

  info(message: string, ...args: unknown[]): void {
    if (this.shouldLog()) {
      console.info(...this.formatMessage(message, ...args));
    }
  }

  debug(message: string, ...args: unknown[]): void {
    if (this.shouldLog()) {
      console.debug(...this.formatMessage(message, ...args));
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  auth(message: string, ...args: unknown[]): void {
    this.log(`üîê AUTH: ${message}`, ...args);
  }

  api(message: string, ...args: unknown[]): void {
    this.log(`üåê API: ${message}`, ...args);
  }

  socket(message: string, ...args: unknown[]): void {
    this.log(`üîå SOCKET: ${message}`, ...args);
  }

  ui(message: string, ...args: unknown[]): void {
    this.log(`üé® UI: ${message}`, ...args);
  }

  performance(message: string, ...args: unknown[]): void {
    this.log(`‚ö° PERF: ${message}`, ...args);
  }

  security(message: string, ...args: unknown[]): void {
    this.log(`üõ°Ô∏è SECURITY: ${message}`, ...args);
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export const logger = new Logger();
export const authLogger = new Logger({ prefix: 'AUTH' });
export const apiLogger = new Logger({ prefix: 'API' });
export const socketLogger = new Logger({ prefix: 'SOCKET' });
export const uiLogger = new Logger({ prefix: 'UI' });
export const perfLogger = new Logger({ prefix: 'PERF' });
export const securityLogger = new Logger({ prefix: 'SECURITY' });

// –£—Å–ª–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è development
export const devLog = {
  log: (message: string, ...args: unknown[]) => {
    if (process.env.NODE_ENV === 'development') {
      console.log(message, ...args);
    }
  },
  warn: (message: string, ...args: unknown[]) => {
    if (process.env.NODE_ENV === 'development') {
      console.warn(message, ...args);
    }
  },
  error: (message: string, ...args: unknown[]) => {
    if (process.env.NODE_ENV === 'development') {
      console.error(message, ...args);
    }
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const measurePerformance = (name: string, fn: () => void) => {
  const start = performance.now();
  fn();
  const end = performance.now();
  const duration = end - start;
  
  if (duration > 100) { // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    perfLogger.warn(`${name} took ${duration.toFixed(2)}ms`);
  }
  
  return duration;
};

export default logger;
