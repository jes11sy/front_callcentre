#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ bundle —Ä–∞–∑–º–µ—Ä–∞ –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

import fs from 'fs';
import path from 'path';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m',
  bold: '\x1b[1m',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
function formatBytes(bytes, decimals = 2) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

// –ê–Ω–∞–ª–∏–∑ package.json
function analyzePackageJson() {
  const packagePath = path.join(process.cwd(), 'package.json');
  const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  
  console.log(`${colors.bold}${colors.blue}üì¶ –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô${colors.reset}\n`);
  
  const dependencies = packageJson.dependencies || {};
  const devDependencies = packageJson.devDependencies || {};
  
  console.log(`${colors.green}Production –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (${Object.keys(dependencies).length}):${colors.reset}`);
  Object.entries(dependencies).forEach(([name, version]) => {
    console.log(`  ‚Ä¢ ${name}@${version}`);
  });
  
  console.log(`\n${colors.yellow}Development –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (${Object.keys(devDependencies).length}):${colors.reset}`);
  Object.entries(devDependencies).forEach(([name, version]) => {
    console.log(`  ‚Ä¢ ${name}@${version}`);
  });
  
  return { dependencies, devDependencies };
}

// –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –∫–æ–¥–µ
function analyzeImports() {
  console.log(`\n${colors.bold}${colors.blue}üîç –ê–ù–ê–õ–ò–ó –ò–ú–ü–û–†–¢–û–í${colors.reset}\n`);
  
  const srcDir = path.join(process.cwd(), 'src');
  const importStats = {};
  
  function scanDirectory(dir) {
    const files = fs.readdirSync(dir);
    
    files.forEach(file => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory()) {
        scanDirectory(filePath);
      } else if (file.endsWith('.tsx') || file.endsWith('.ts') || file.endsWith('.jsx') || file.endsWith('.js')) {
        analyzeFile(filePath);
      }
    });
  }
  
  function analyzeFile(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const importRegex = /import\s+.*?\s+from\s+['"]([^'"]+)['"]/g;
      let match;
      
      while ((match = importRegex.exec(content)) !== null) {
        const importPath = match[1];
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        if (importPath.startsWith('.')) continue;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–∞–∫–µ—Ç–∞
        const packageName = importPath.split('/')[0];
        
        if (!importStats[packageName]) {
          importStats[packageName] = {
            count: 0,
            files: new Set()
          };
        }
        
        importStats[packageName].count++;
        importStats[packageName].files.add(filePath);
      }
    } catch (error) {
      console.warn(`${colors.yellow}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: ${filePath}${colors.reset}`);
    }
  }
  
  scanDirectory(srcDir);
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
  const sortedImports = Object.entries(importStats)
    .sort(([,a], [,b]) => b.count - a.count);
  
  console.log(`${colors.green}–¢–æ–ø –∏–º–ø–æ—Ä—Ç–æ–≤:${colors.reset}`);
  sortedImports.slice(0, 20).forEach(([packageName, stats]) => {
    console.log(`  ‚Ä¢ ${packageName}: ${stats.count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤ ${stats.files.size} —Ñ–∞–π–ª–∞—Ö`);
  });
  
  return importStats;
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
function generateRecommendations(packageJson, importStats) {
  console.log(`\n${colors.bold}${colors.magenta}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò${colors.reset}\n`);
  
  const recommendations = [];
  
  // –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
  const largeLibraries = {
    'lucide-react': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∫–æ–Ω–æ–∫',
    'framer-motion': '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–º–µ–Ω—É –Ω–∞ –±–æ–ª–µ–µ –ª–µ–≥–∫—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É',
    '@radix-ui': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ tree shaking –¥–ª—è Radix UI',
    'socket.io-client': '–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –≥–¥–µ –Ω—É–∂–µ–Ω',
    '@tanstack': '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è',
    'axios': '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–º–µ–Ω—É –Ω–∞ fetch API',
    'react-hook-form': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ tree shaking',
    'zod': '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ö–µ–º—ã'
  };
  
  Object.entries(largeLibraries).forEach(([lib, recommendation]) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, —Ç–∞–∫ –∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ
    const isUsed = (packageJson.dependencies && packageJson.dependencies[lib]) || 
                   (importStats && importStats[lib]) || 
                   (importStats && Object.keys(importStats).some(key => key.includes(lib)));
    
    if (isUsed) {
      recommendations.push({
        library: lib,
        priority: 'high',
        recommendation: recommendation
      });
    }
  });
  
  // –ê–Ω–∞–ª–∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const unusedDeps = Object.keys(packageJson.dependencies || {}).filter(
    dep => !importStats[dep] && !dep.startsWith('@types/') && !dep.includes('@radix-ui')
  );
  
  if (unusedDeps.length > 0) {
    recommendations.push({
      library: '–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
      priority: 'medium',
      recommendation: `–£–¥–∞–ª–∏—Ç–µ: ${unusedDeps.join(', ')}`
    });
  }
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  recommendations.forEach((rec, index) => {
    const priorityColor = rec.priority === 'high' ? colors.red : 
                         rec.priority === 'medium' ? colors.yellow : colors.green;
    
    console.log(`${priorityColor}${index + 1}. ${rec.library}${colors.reset}`);
    console.log(`   ${rec.recommendation}\n`);
  });
  
  return recommendations;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log(`${colors.bold}${colors.cyan}üöÄ –ê–ù–ê–õ–ò–ó BUNDLE –†–ê–ó–ú–ï–†–ê${colors.reset}\n`);
  
  try {
    const packageJson = analyzePackageJson();
    const importStats = analyzeImports();
    const recommendations = generateRecommendations(packageJson.dependencies, importStats);
    
    console.log(`${colors.bold}${colors.green}‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!${colors.reset}`);
    console.log(`\n${colors.blue}–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ bundle —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:${colors.reset}`);
    console.log(`${colors.white}  npm run analyze${colors.reset}`);
    
  } catch (error) {
    console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:${colors.reset}`, error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = {
  analyzePackageJson,
  analyzeImports,
  generateRecommendations
};
